34a35,37
> import std.bitmanip;
> import std.string: toStringz;
> import core.stdc.errno : errno, EINVAL;
36a40,46
> import htslib.hts;
> import htslib.hts_log;
> import htslib.hts_endian;
> import htslib.kstring : kstring_t;
> import htslib.bgzf : BGZF;
> 
> @system:
37a48
> @nogc nothrow {
90a102
> 
93,94c105,106
<     ulong[3] info; 
<     
---
>     ulong[3] info; /* stores Number:20, var:4, Type:4, ColType:4 in info[0..2]
>                      for BCF_HL_FLT,INFO,FMT and contig length in info[0] for BCF_HL_CTG */
98a111
> 
105a119
> 
122a137,138
> 
> 
144a161,162
> 
> 
150a169
> 
164c183
<         uint, "p_free", 1));
---
>         bool, "p_free", 1));
166a186
> 
176c196
<     union _Anonymous_0
---
>     union V1
182c202
<     _Anonymous_0 v1; 
---
>     V1 v1; 
199a220
> 
201a223
>     
332c354
< alias vcfFile = htsFile_;
---
> alias vcfFile = htsFile;
532a555
> deprecated("Please use bcf_hdr_merge instead")
578a602
> deprecated("use bcf_hdr_format() instead")
617a642,644
>  
> 
> 
621c648
<     char** samples,
---
>     const(char*)* samples,
628c655
< extern (D) auto bcf_hdr_nsamples(T)(auto ref T hdr)
---
> pragma(inline, true) auto bcf_hdr_nsamples (bcf_hdr_t *hdr)
723a751
> 
839,856c867,875
< extern (D) auto bcf_update_info_int32(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 values, auto ref T4 n)
< {
<     return bcf_update_info(hdr, line, key, values, n, BCF_HT_INT);
< }
< 
< extern (D) auto bcf_update_info_float(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 values, auto ref T4 n)
< {
<     return bcf_update_info(hdr, line, key, values, n, BCF_HT_REAL);
< }
< 
< extern (D) auto bcf_update_info_flag(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 string, auto ref T4 n)
< {
<     return bcf_update_info(hdr, line, key, string, n, BCF_HT_FLAG);
< }
< 
< extern (D) auto bcf_update_info_string(T0, T1, T2, T3)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 string)
< {
<     return bcf_update_info(hdr, line, key, string, 1, BCF_HT_STR);
---
> pragma(inline, true) {    
>     auto bcf_update_info_int32(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(void) *values, int n) 
>         { return bcf_update_info(hdr, line, key, values, n, BCF_HT_INT); }
>     auto bcf_update_info_float(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(void) *values, int n) 
>         { return bcf_update_info(hdr, line, key, values, n, BCF_HT_REAL); }
>     auto bcf_update_info_flag(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(void) *values, int n) 
>         { return bcf_update_info(hdr, line, key, values, n, BCF_HT_FLAG); }
>     auto bcf_update_info_string(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(void) *values) 
>         { return bcf_update_info(hdr, line, key, values, 1, BCF_HT_STR); }
883,885c902,903
< int bcf_update_info_int64(
<     const(bcf_hdr_t)* hdr,
<     bcf1_t* line,
---
> pragma(inline, true)
> auto bcf_update_info_int64( const(bcf_hdr_t) *hdr, bcf1_t *line,
887,888c905,908
<     const(long)* values,
<     int n);
---
>                             const(long) *values, int n)
> {
>     return bcf_update_info(hdr, line, key, values, n, BCF_HT_LONG);
> }
906,909d925
< extern (D) auto bcf_update_format_int32(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 values, auto ref T4 n)
< {
<     return bcf_update_format(hdr, line, key, values, n, BCF_HT_INT);
< }
911,913d926
< extern (D) auto bcf_update_format_float(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 values, auto ref T4 n)
< {
<     return bcf_update_format(hdr, line, key, values, n, BCF_HT_REAL);
916,918c929,937
< extern (D) auto bcf_update_format_char(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 key, auto ref T3 values, auto ref T4 n)
< {
<     return bcf_update_format(hdr, line, key, values, n, BCF_HT_STR);
---
> pragma(inline, true) {
>     auto bcf_update_format_int32(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(int) *values, int n) 
>         { return bcf_update_format(hdr, line, key, values, n, BCF_HT_INT); }
>     auto bcf_update_format_float(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(float) *values, int n) 
>         { return bcf_update_format(hdr, line, key, values, n, BCF_HT_REAL); }
>     auto bcf_update_format_char(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *key, const(char) **values, int n) 
>         { return bcf_update_format(hdr, line, key, values, n, BCF_HT_STR); }
>     auto bcf_update_genotypes(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) **gts, int n) 
>         { return bcf_update_format(hdr, line, toStringz("GT"c), gts, n, BCF_HT_INT); 
920,923d938
< 
< extern (D) auto bcf_update_genotypes(T0, T1, T2, T3)(auto ref T0 hdr, auto ref T1 line, auto ref T2 gts, auto ref T3 n)
< {
<     return bcf_update_format(hdr, line, "GT", gts, n, BCF_HT_INT);
925a941,942
> @nogc nothrow {
> 
944,947d960
< extern (D) auto bcf_gt_phased(T)(auto ref T idx)
< {
<     return (idx + 1) << 1 | 1;
< }
949,952c962,963
< extern (D) auto bcf_gt_unphased(T)(auto ref T idx)
< {
<     return (idx + 1) << 1;
< }
---
> pragma(inline, true) {
>     auto bcf_gt_phased(int idx)     { return (((idx)+1)<<1|1);  }
954c965
< enum bcf_gt_missing = 0;
---
>     auto bcf_gt_unphased(int idx)   { return (((idx)+1)<<1);    }
956,959c967
< extern (D) int bcf_gt_is_missing(T)(auto ref T val)
< {
<     return val >> 1 ? 0 : 1;
< }
---
>     auto bcf_gt_is_missing(int val) { return ((val)>>1 ? 0 : 1);}
961,964c969
< extern (D) auto bcf_gt_is_phased(T)(auto ref T idx)
< {
<     return idx & 1;
< }
---
>     auto bcf_gt_is_phased(int idx)  { return ((idx)&1);         }
966,968c971
< extern (D) auto bcf_gt_allele(T)(auto ref T val)
< {
<     return (val >> 1) - 1;
---
>     auto bcf_gt_allele(int val)     { return (((val)>>1)-1);    }
970a974,975
>     enum int bcf_gt_missing = 0;
> 
972c977,980
< extern (D) auto bcf_alleles2gt(T0, T1)(auto ref T0 a, auto ref T1 b)
---
> pragma(inline, true) {
>         auto bcf_alleles2gt(int a, int b) { return ((a)>(b)?((a)*((a)+1)/2+(b)):((b)*((b)+1)/2+(a))); }
>         
>         void bcf_gt2alleles(int igt, int *a, int *b)
974c982,985
<     return a > b ? (a * (a + 1) / 2 + b) : (b * (b + 1) / 2 + a);
---
>             int k = 0, dk = 1; 
>             while ( k<igt ) { dk++; k += dk; }
>             *b = dk - 1; *a = igt - k + *b;
>         }
976,977d986
< 
< void bcf_gt2alleles(int igt, int* a, int* b);
1026,1043c1035,1043
< extern (D) auto bcf_get_info_int32(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_INT);
< }
< 
< extern (D) auto bcf_get_info_float(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_REAL);
< }
< 
< extern (D) auto bcf_get_info_string(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_STR);
< }
< 
< extern (D) auto bcf_get_info_flag(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_FLAG);
---
> pragma(inline, true) {
>     auto bcf_get_info_int32(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_INT); }
>     auto bcf_get_info_float(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_REAL); }
>     auto bcf_get_info_string(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_STR); }
>     auto bcf_get_info_flag(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_info_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_FLAG); }
1073,1078c1073,1080
< int bcf_get_info_int64(
<     const(bcf_hdr_t)* hdr,
<     bcf1_t* line,
<     const(char)* tag,
<     long** dst,
<     int* ndst);
---
> pragma(inline, true)
> auto bcf_get_info_int64(const(bcf_hdr_t) *hdr, bcf1_t *line,
>                                         const(char) *tag, long **dst,
>                                         int *ndst)
> {
>     return bcf_get_info_values(hdr, line, tag,
>                                 cast(void **) dst, ndst, BCF_HT_LONG);
> }
1132,1135d1133
< extern (D) auto bcf_get_format_int32(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_INT);
< }
1137,1139d1134
< extern (D) auto bcf_get_format_float(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_REAL);
1142,1144c1137,1145
< extern (D) auto bcf_get_format_char(T0, T1, T2, T3, T4)(auto ref T0 hdr, auto ref T1 line, auto ref T2 tag, auto ref T3 dst, auto ref T4 ndst)
< {
<     return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_STR);
---
> pragma(inline, true) {
>     auto bcf_get_format_int32(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_INT); }
>     auto bcf_get_format_float(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_REAL); }
>     auto bcf_get_format_char(const(bcf_hdr_t) *hdr, bcf1_t *line, const(char) *tag, void **dst, int *ndst) 
>         { return bcf_get_format_values(hdr, line, tag, cast(void**) dst, ndst, BCF_HT_STR); }
>     auto bcf_get_genotypes(const(bcf_hdr_t) *hdr, bcf1_t *line, void **dst, int *ndst) 
>         { return bcf_get_format_values(hdr, line, toStringz("GT"c), cast(void**) dst, ndst, BCF_HT_INT); }
1147,1150c1148
< extern (D) auto bcf_get_genotypes(T0, T1, T2, T3)(auto ref T0 hdr, auto ref T1 line, auto ref T2 dst, auto ref T3 ndst)
< {
<     return bcf_get_format_values(hdr, line, "GT", cast(void**) dst, ndst, BCF_HT_INT);
< }
---
> @nogc nothrow {
1182,1185c1180,1182
< extern (D) auto bcf_hdr_int2id(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return hdr.id[type][int_id].key;
< }
---
> pragma(inline, true)
> auto bcf_hdr_int2id(const(bcf_hdr_t) *hdr, int type, int int_id)
>     { return hdr.id[type][int_id].key; }
1191,1193c1188,1192
< int bcf_hdr_name2id(const(bcf_hdr_t)* hdr, const(char)* id);
< const(char)* bcf_hdr_id2name(const(bcf_hdr_t)* hdr, int rid);
< const(char)* bcf_seqname(const(bcf_hdr_t)* hdr, const(bcf1_t)* rec);
---
> pragma(inline, true) int bcf_hdr_name2id(const(bcf_hdr_t) *hdr, const(char) *id) { return bcf_hdr_id2int(hdr, BCF_DT_CTG, id); } 
>     
>     pragma(inline, true) const(char) *bcf_hdr_id2name(const(bcf_hdr_t) *hdr, int rid) { return hdr.id[BCF_DT_CTG][rid].key; } 
>     
>     pragma(inline, true) const(char) *bcf_seqname(const(bcf_hdr_t) *hdr, bcf1_t *rec) { return hdr.id[BCF_DT_CTG][rec.rid].key; } 
1218,1221d1216
< extern (D) auto bcf_hdr_id2length(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return hdr.id[BCF_DT_ID][int_id].val.info[type] >> 8 & 0xf;
< }
1223,1226c1218,1219
< extern (D) auto bcf_hdr_id2number(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return hdr.id[BCF_DT_ID][int_id].val.info[type] >> 12;
< }
---
> pragma(inline, true) {
>     auto bcf_hdr_id2length (const(bcf_hdr_t) *hdr, int type, int int_id) { return ((hdr).id[BCF_DT_ID][int_id].val.info[type]>>8 & 0xf); } 
1228,1231c1221
< extern (D) auto bcf_hdr_id2type(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return cast(uint) hdr.id[BCF_DT_ID][int_id].val.info[type] >> 4 & 0xf;
< }
---
>     auto bcf_hdr_id2number (const(bcf_hdr_t) *hdr, int type, int int_id) { return ((hdr).id[BCF_DT_ID][int_id].val.info[type]>>12);    } 
1233,1236c1223
< extern (D) auto bcf_hdr_id2coltype(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return cast(uint) hdr.id[BCF_DT_ID][int_id].val.info[type] & 0xf;
< }
---
>     uint bcf_hdr_id2type (const(bcf_hdr_t) *hdr, int type, int int_id)   { return cast(uint)((hdr).id[BCF_DT_ID][int_id].val.info[type]>>4 & 0xf); } 
1238,1241c1225
< extern (D) auto bcf_hdr_idinfo_exists(T0, T1, T2)(auto ref T0 hdr, auto ref T1 type, auto ref T2 int_id)
< {
<     return int_id >= 0 && bcf_hdr_id2coltype(hdr, type, int_id) != 0xf;
< }
---
>     uint bcf_hdr_id2coltype (const(bcf_hdr_t) *hdr, int type, int int_id){ return cast(uint)((hdr).id[BCF_DT_ID][int_id].val.info[type] & 0xf); } 
1243,1246c1227
< extern (D) auto bcf_hdr_id2hrec(T0, T1, T2, T3)(auto ref T0 hdr, auto ref T1 dict_type, auto ref T2 col_type, auto ref T3 int_id)
< {
<     return hdr.id[dict_type == BCF_DT_CTG ? BCF_DT_CTG : BCF_DT_ID][int_id].val.hrec[dict_type == BCF_DT_CTG ? 0 : col_type];
< }
---
>     auto bcf_hdr_idinfo_exists (const(bcf_hdr_t) *hdr, int type, int int_id) { return ((int_id<0 || bcf_hdr_id2coltype(hdr,type,int_id)==0xf) ? 0 : 1); } 
1247a1229,1232
>     auto bcf_hdr_id2hrc (const(bcf_hdr_t) *hdr, int dict_type, int col_type, int int_id)
>         { return ((hdr).id[(dict_type)==BCF_DT_CTG?BCF_DT_CTG:BCF_DT_ID][int_id].val.hrec[(dict_type)==BCF_DT_CTG?0:(col_type)]); 
>     }
> } 
1300,1302d1284
< extern (D) auto bcf_itr_queryi(T0, T1, T2, T3)(auto ref T0 idx, auto ref T1 tid, auto ref T2 beg, auto ref T3 end)
< {
<     return hts_itr_query(idx, tid, beg, end, bcf_readrec);
1305,1307c1287,1306
< extern (D) auto bcf_itr_querys(T0, T1, T2)(auto ref T0 idx, auto ref T1 hdr, auto ref T2 s)
< {
<     return hts_itr_querys(idx, s, cast(hts_name2id_f) bcf_hdr_name2id, hdr, hts_itr_query, bcf_readrec);
---
> pragma(inline, true) {
>     
>     auto bcf_itr_queryi(const(hts_idx_t) *idx, int tid, int beg, int end)
>         { return hts_itr_query(idx, tid, beg, end, &bcf_readrec); }
>     
>     
>     auto bcf_itr_querys(const(hts_idx_t) *idx, const(bcf_hdr_t) *hdr, const(char) *s)
>         { return hts_itr_querys(idx, s, cast(hts_name2id_f) &bcf_hdr_name2id, cast(void *) hdr,
>                                 &hts_itr_query, &bcf_readrec); }
> 
>     
>     
>     
>     int bcf_itr_next(htsFile *htsfp, hts_itr_t *itr, void *r) {
>         if (htsfp.is_bgzf)
>             return hts_itr_next(htsfp.fp.bgzf, itr, r, null);
> 
>         hts_log_error(__FUNCTION__,"Only bgzf compressed files can be used with iterators");
>         errno = EINVAL;
>         return -2;
1310c1309,1310
< int bcf_itr_next(htsFile* htsfp, hts_itr_t* itr, void* r);
---
> @nogc nothrow:
> 
1317,1320c1317
< extern (D) auto bcf_index_load(T)(auto ref T fn)
< {
<     return hts_idx_load(fn, HTS_FMT_CSI);
< }
---
> auto bcf_index_load(const(char) *fn) { return hts_idx_load(fn, HTS_FMT_CSI); }
1322,1324c1319,1321
< extern (D) auto bcf_index_seqnames(T0, T1, T2)(auto ref T0 idx, auto ref T1 hdr, auto ref T2 nptr)
< {
<     return hts_idx_seqnames(idx, nptr, cast(hts_id2name_f) bcf_hdr_id2name, hdr);
---
> 
> auto bcf_index_seqnames(const(hts_idx_t) *idx, const(bcf_hdr_t) *hdr, int *nptr)
>     { return hts_idx_seqnames(idx, nptr, cast(hts_id2name_f) &bcf_hdr_id2name, cast(void *) hdr); }
1447,1449c1444,1446
< enum bcf_int16_vector_end = -32767; /* INT16_MIN + 1 */
< enum bcf_int32_vector_end = -2147483647; /* INT32_MIN + 1 */
< enum bcf_int64_vector_end = -9223372036854775807LL; /* INT64_MIN + 1 */
---
> enum bcf_int16_vector_end = -32_767; /* INT16_MIN + 1 */
> enum bcf_int32_vector_end = -2_147_483_647; /* INT32_MIN + 1 */
> enum bcf_int64_vector_end = -9_223_372_036_854_775_807L; /* INT64_MIN + 1 */
1452,1454c1449,1451
< enum bcf_int16_missing = -32767 - 1; /* INT16_MIN */
< enum bcf_int32_missing = -2147483647 - 1; /* INT32_MIN */
< enum bcf_int64_missing = -9223372036854775807LL - 1LL; /* INT64_MIN */
---
> enum bcf_int16_missing = -32_767 - 1; /* INT16_MIN */
> enum bcf_int32_missing = -2_147_483_647 - 1; /* INT32_MIN */
> enum bcf_int64_missing = -9_223_372_036_854_775_807L - 1L; /* INT64_MIN */
1464,1465c1461,1462
< enum BCF_MIN_BT_INT16 = -32760; /* INT16_MIN + 8 */
< enum BCF_MIN_BT_INT32 = -2147483640; /* INT32_MIN + 8 */
---
> enum BCF_MIN_BT_INT16 = -32_760; /* INT16_MIN + 8 */
> enum BCF_MIN_BT_INT32 = -2_147_483_640; /* INT32_MIN + 8 */
1469c1466,1478
< void bcf_float_set(float* ptr, uint value);
---
> version(LDC) pragma(inline, true):
> version(GNU) pragma(inline, true):
> /* u wot */
> void bcf_float_set(float *ptr, uint32_t value)
> {
>     union U { uint32_t i; float f; }
>     U u;
>     u.i = value;
>     *ptr = u.f;
> }
> 
> 
> void bcf_float_set_vector_end(float x) { bcf_float_set(&x, bcf_float_vector_end); }
1471c1480,1484
< extern (D) auto bcf_float_set_vector_end(T)(auto ref T x)
---
> void bcf_float_set_missing(float x) { bcf_float_set(&x, bcf_float_missing); }
> 
> /* u wot */
> pragma(inline, true)
> int bcf_float_is_missing(float f)
1473c1486,1489
<     return bcf_float_set(&x, bcf_float_vector_end);
---
>     union U { uint32_t i; float f; }
>     U u;
>     u.f = f;
>     return u.i==bcf_float_missing ? 1 : 0;
1476c1492,1493
< extern (D) auto bcf_float_set_missing(T)(auto ref T x)
---
> pragma(inline, true)
> int bcf_float_is_vector_end(float f)
1478c1495,1498
<     return bcf_float_set(&x, bcf_float_missing);
---
>     union U { uint32_t i; float f; }
>     U u;
>     u.f = f;
>     return u.i==bcf_float_vector_end ? 1 : 0;
1481,1482d1500
< int bcf_float_is_missing(float f);
< int bcf_float_is_vector_end(float f);
1484c1502,1534
< int bcf_format_gt(bcf_fmt_t* fmt, int isample, kstring_t* str);
---
> pragma(inline, true)
> int bcf_format_gt(bcf_fmt_t *fmt, int isample, kstring_t *str)
> {
>     uint32_t e = 0;
>     void branch(T)()    
>     if (is(T == int8_t) || is(T == int16_t) || is(T == int32_t))
>     {
>         static if (is(T == int8_t))
>             auto vector_end = bcf_int8_vector_end;
>         else static if (is(T == int16_t))
>             auto vector_end = bcf_int16_vector_end;
>         else
>             auto vector_end = bcf_int32_vector_end;
> 
>         T *ptr = cast(T*) (fmt.p + (isample * fmt.size));
>         for (int i=0; i<fmt.n && ptr[i] != vector_end; i++)
>         {
>             if ( i ) e |= kputc("/|"[ptr[i]&1], str) < 0;
>             if ( !(ptr[i]>>1) ) e |= kputc('.', str) < 0;
>             else e |= kputw((ptr[i]>>1) - 1, str) < 0;
>         }
>         if (i == 0) e |= kputc('.', str) < 0;
>     }
>     switch (fmt.type) {
>         case BCF_BT_INT8:  branch!int8_t; break;
>         case BCF_BT_INT16: branch!int16_t; break;
>         case BCF_BT_INT32: branch!int32_t; break;
>         case BCF_BT_NULL:  e |= kputc('.', str) < 0; break;
>         default: hts_log_error("Unexpected type %d", fmt.type); return -2;
>     }
> 
>     return e == 0 ? 0 : -1;
> }
1486d1535
< int bcf_enc_size(kstring_t* s, int size, int type);
1488c1537,1559
< int bcf_enc_inttype(c_long x);
---
> pragma(inline, true)
> int bcf_enc_size(kstring_t *s, int size, int type)
> {
>     uint32_t e = 0;
>     if (size >= 15) {
>         e |= kputc(15<<4|type, s) < 0;
>         if (size >= 128) {
>             if (size >= 32_768) {
>                 int32_t x = size;
>                 e |= kputc(1<<4|BCF_BT_INT32, s) < 0;
>                 e |= kputsn(cast(char*)&x, 4, s) < 0;
>             } else {
>                 int16_t x = size;
>                 e |= kputc(1<<4|BCF_BT_INT16, s) < 0;
>                 e |= kputsn(cast(char*)&x, 2, s) < 0;
>             }
>         } else {
>             e |= kputc(1<<4|BCF_BT_INT8, s) < 0;
>             e |= kputc(size, s) < 0;
>         }
>     } else e |= kputc(size<<4|type, s) < 0;
>     return e == 0 ? 0 : -1;
> }
1490d1560
< int bcf_enc_int1(kstring_t* s, int x);
1492a1563,1596
> pragma(inline, true)
> int bcf_enc_inttype(long x)
> {
>     if (x <= BCF_MAX_BT_INT8 && x >= BCF_MIN_BT_INT8) return BCF_BT_INT8;
>     if (x <= BCF_MAX_BT_INT16 && x >= BCF_MIN_BT_INT16) return BCF_BT_INT16;
>     return BCF_BT_INT32;
> }
> 
> 
> pragma(inline, true)
> int bcf_enc_int1(kstring_t *s, int32_t x)
> {
>     uint32_t e = 0;
>     if (x == bcf_int32_vector_end) {
>         e |= bcf_enc_size(s, 1, BCF_BT_INT8);
>         e |= kputc(bcf_int8_vector_end, s) < 0;
>     } else if (x == bcf_int32_missing) {
>         e |= bcf_enc_size(s, 1, BCF_BT_INT8);
>         e |= kputc(bcf_int8_missing, s) < 0;
>     } else if (x <= BCF_MAX_BT_INT8 && x >= BCF_MIN_BT_INT8) {
>         e |= bcf_enc_size(s, 1, BCF_BT_INT8);
>         e |= kputc(x, s) < 0;
>     } else if (x <= BCF_MAX_BT_INT16 && x >= BCF_MIN_BT_INT16) {
>         int16_t z = x;
>         e |= bcf_enc_size(s, 1, BCF_BT_INT16);
>         e |= kputsn(cast(char*)&z, 2, s) < 0;
>     } else {
>         int32_t z = x;
>         e |= bcf_enc_size(s, 1, BCF_BT_INT32);
>         e |= kputsn(cast(char*)&z, 4, s) < 0;
>     }
>     return e == 0 ? 0 : -1;
> }
> 
1506,1508c1610,1628
< 
< 
< long bcf_dec_int1(const(ubyte)* p, int type, ubyte** q);
---
> pragma(inline, true)
> int64_t bcf_dec_int1(const(ubyte) *p, int type, ubyte **q)
> {
>     if (type == BCF_BT_INT8) {
>         *q = cast(ubyte*)p + 1;
>         return le_to_i8(p);
>     } else if (type == BCF_BT_INT16) {
>         *q = cast(ubyte*)p + 2;
>         return le_to_i16(p);
>     } else if (type == BCF_BT_INT32) {
>         *q = cast(ubyte*)p + 4;
>         return le_to_i32(p);
>     } else if (type == BCF_BT_INT64) {
>         *q = cast(ubyte*)p + 4;
>         return le_to_i64(p);
>     } else { 
>         return 0;
>     }
> }
1526,1528c1646,1650
< long bcf_dec_typed_int1(const(ubyte)* p, ubyte** q);
< 
< int bcf_dec_size(const(ubyte)* p, ubyte** q, int* type);
---
> pragma(inline, true)
> long bcf_dec_typed_int1 (const(ubyte)* p, ubyte** q)
> {
>     return bcf_dec_int1(p + 1, *p&0xf, q);
> }
1529a1652,1660
> pragma(inline, true)
> int bcf_dec_size (const(ubyte)* p, ubyte** q, int* type)
> {
>     *type = *p & 0xf;
>     if (*p>>4 != 15) {
>         *q = cast(ubyte*)p + 1;
>         return *p>>4;
>     } else return bcf_dec_typed_int1(p + 1, q);
> }
\ No newline at end of file
