26d25
< 
28a28,34
> import htslib.hts;
> import htslib.bgzf : BGZF;
> 
> @system:
> nothrow:
> @nogc:
> 
63,66c69,71
< extern (D) auto tbx_itr_queryi(T0, T1, T2, T3)(auto ref T0 tbx, auto ref T1 tid, auto ref T2 beg, auto ref T3 end)
< {
<     return hts_itr_query(tbx.idx, tid, beg, end, tbx_readrec);
< }
---
> pragma(inline, true)
> auto tbx_itr_queryi(const tbx_t *tbx, int tid, hts_pos_t beg, hts_pos_t end)
>     { return hts_itr_query(tbx.idx, tid, beg, end, &tbx_readrec); }
68c73,74
< extern (D) auto tbx_itr_querys(T0, T1)(auto ref T0 tbx, auto ref T1 s)
---
> pragma(inline, true)
> auto tbx_itr_querys(const tbx_t *tbx, const char *s)
70c76,80
<     return hts_itr_querys(tbx.idx, s, cast(hts_name2id_f) tbx_name2id, tbx, hts_itr_query, tbx_readrec);
---
>     return hts_itr_querys(tbx.idx, s,
>         cast(hts_name2id_f)(&tbx_name2id),
>         cast(void*)tbx,
>         &hts_itr_query,
>         &tbx_readrec);
73,76c83,85
< extern (D) auto tbx_itr_next(T0, T1, T2, T3)(auto ref T0 htsfp, auto ref T1 tbx, auto ref T2 itr, auto ref T3 r)
< {
<     return hts_itr_next(hts_get_bgzfp(htsfp), itr, r, tbx);
< }
---
> pragma(inline, true)
> auto tbx_itr_next(htsFile *htsfp, tbx_t *tbx, hts_itr_t *itr, void *r)
>     { return hts_itr_next(hts_get_bgzfp(htsfp), itr, r, tbx); }
78,81c87,89
< extern (D) auto tbx_bgzf_itr_next(T0, T1, T2, T3)(auto ref T0 bgzfp, auto ref T1 tbx, auto ref T2 itr, auto ref T3 r)
< {
<     return hts_itr_next(bgzfp, itr, r, tbx);
< }
---
> pragma(inline, true)
> auto tbx_bgzf_itr_next(BGZF *bgzfp, tbx_t *tbx, hts_itr_t *itr, void *r)
>     { return hts_itr_next(bgzfp, itr, r, tbx); }
82a91
> // contig name to integer id
85c94
< /* Internal helper function used by tbx_itr_next() */
---
> /* Internal helper function used by tbx_itr_next() defined in hts.c -- do not use directly*/
155a165
> /// return C-style array of sequence names (NB: free the array but not the values)
157a168
> /// destroy/dealloc tabix data
