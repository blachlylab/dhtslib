26d25
< 
29,30c28,34
< import core.stdc.config;
< import core.stdc.stdio;
---
> @system:
> nothrow:
> @nogc:
> 
> import core.stdc.config : c_long;
> import core.stdc.stdarg;
> import core.stdc.stdio : EOF;
31a36,40
> import core.stdc.string : memcpy, strlen;
> 
> import htslib.kroundup;
> 
> alias ssize_t = ptrdiff_t;	// should be defined in core.stdc somewhere but is not :/
89,90c98,99
< alias kgets_func = char* function(char*, int, void*);
< int kgetline(kstring_t* s, char* function() fgets_fn, void* fp);
---
> alias kgets_func = char* function(char*, int, void*)*;
> int kgetline(kstring_t* s, kgets_func fgets_fn, void* fp);
96,97c105,106
< alias kgets_func2 = c_long function(char*, size_t, void*);
< int kgetline2(kstring_t* s, ssize_t function() fgets_fn, void* fp);
---
> alias kgets_func2 = c_long function(char*, size_t, void*)*;
> int kgetline2(kstring_t* s, kgets_func2 fgets_fn, void* fp);
107c116,120
< void ks_initialize(kstring_t* s);
---
> void ks_initialize(kstring_t* s)
> {
>     s.l = s.m = 0;
>     s.s = null;
> }
110c123,135
< int ks_resize(kstring_t* s, size_t size);
---
> int ks_resize(kstring_t* s, size_t size)
> {
> 	if (s.m < size) {
> 		char *tmp;
> 		kroundup_size_t(size);
> 		tmp = cast(char*)realloc(s.s, size);
> 		if (!tmp && size)
> 		    return -1;
> 		s.s = tmp;
> 		s.m = size;
> 	}
> 	return 0;
> }
112a138,140
> int ks_expand(kstring_t* s, size_t expansion)
> {
>     size_t new_size = s.l + expansion;
114,115c142,145
< // Overflow check
< int ks_expand(kstring_t* s, size_t expansion);
---
>     if (new_size < s.l) // Overflow check
>         return -1;
>     return ks_resize(s, new_size);
> }
118c148,151
< char* ks_str(kstring_t* s);
---
> char* ks_str(kstring_t* s)
> {
> 	return s.s;
> }
126c159,162
< const(char)* ks_c_str(kstring_t* s);
---
> const(char)* ks_c_str(kstring_t* s)
> {
>     return s.l && s.s ? s.s : "";
> }
128c164,167
< size_t ks_len(kstring_t* s);
---
> size_t ks_len(kstring_t* s)
> {
> 	return s.l;
> }
136c175,179
< kstring_t* ks_clear(kstring_t* s);
---
> kstring_t* ks_clear(kstring_t* s)
> {
>     s.l = 0;
>     return s;
> }
142c185,191
< char* ks_release(kstring_t* s);
---
> char* ks_release(kstring_t* s)
> {
> 	char *ss = s.s;
> 	s.l = s.m = 0;
> 	s.s = null;
> 	return ss;
> }
145c194,211
< void ks_free(kstring_t* s);
---
> void ks_free(kstring_t* s)
> {
>     if (s) {
>         free(s.s);
>         ks_initialize(s);
>     }
> }
> 
> int kputsn(const(char)* p, size_t l, kstring_t* s)
> {
> 	size_t new_sz = s.l + l + 2;
> 	if (new_sz <= s.l || ks_resize(s, new_sz) < 0)
> 		return EOF;
> 	memcpy(s.s + s.l, p, l);
> 	s.l += l;
> 	s.s[s.l] = 0;
> 	return cast(int)l;	// no implicit down casting
> }
147c213,216
< int kputsn(const(char)* p, size_t l, kstring_t* s);
---
> int kputs(const(char)* p, kstring_t* s)
> {
> 	return kputsn(p, strlen(p), s);
> }
149c218,225
< int kputs(const(char)* p, kstring_t* s);
---
> int kputc(int c, kstring_t* s)
> {
> 	if (ks_resize(s, s.l + 2) < 0)
> 		return EOF;
> 	s.s[s.l++] = cast(char)c;	// no implicit down casting
> 	s.s[s.l] = 0;
> 	return cast(ubyte)c;
> }
151c227,233
< int kputc(int c, kstring_t* s);
---
> int kputc_(int c, kstring_t* s)
> {
> 	if (ks_resize(s, s.l + 1) < 0)
> 		return EOF;
> 	s.s[s.l++] = cast(char)c;	// no implicit down casting
> 	return 1;
> }
153c235,243
< int kputc_(int c, kstring_t* s);
---
> int kputsn_(const(void)* p, size_t l, kstring_t* s)
> {
> 	size_t new_sz = s.l + l;
> 	if (new_sz < s.l || ks_resize(s, new_sz ? new_sz : 1) < 0)
> 		return EOF;
> 	memcpy(s.s + s.l, p, l);
> 	s.l += l;
> 	return cast(int)l;	// no implicit down casting
> }
155c245,277
< int kputsn_(const(void)* p, size_t l, kstring_t* s);
---
> // htslib 1.10 replaced this function with a higher performance
> // version using BSR/CTLZ intrinsics . this diverges from klib's
> // kstring implementation. other functions may have also changed.
> int kputuw(T)(T x, kstring_t* s){
> 	version(LDC){
> 		static uint[32] kputuw_num_digits = [
> 			10, 10, 10,  9,  9,  9,  8,  8,
> 			8,   7,  7,  7,  7,  6,  6,  6,
> 			5,   5,  5,  4,  4,  4,  4,  3,
> 			3,   3,  2,  2,  2,  1,  1,  1
> 		];
> 		static uint[32] kputuw_thresholds = [
> 			0,        0, 1000000000U, 0,       0, 100000000U,   0,      0,
> 			10000000, 0,          0,  0, 1000000,         0,    0, 100000,
> 			0,        0,      10000,  0,       0,         0, 1000,      0,
> 			0,      100,          0,  0,      10,         0,    0,      0
> 		];
> 	}else{
> 		ulong m;
> 	}
>     static string kputuw_dig2r =
>         "00010203040506070809" ~
>         "10111213141516171819" ~
>         "20212223242526272829" ~
>         "30313233343536373839" ~
>         "40414243444546474849" ~
>         "50515253545556575859" ~
>         "60616263646566676869" ~
>         "70717273747576777879" ~
>         "80818283848586878889" ~
>         "90919293949596979899";
>     uint l, j;
>     char * cp;
157a280,286
>     if (x < 10) {
>         if (ks_resize(s, s.l + 2) < 0)
>             return EOF;
>         s.s[s.l++] = cast(char)('0'+x);
>         s.s[s.l] = 0;
>         return 0;
>     }
160c289
< 
---
> 	version(LDC){
168a298
> 		import ldc.intrinsics;
169a300,303
> 		// ldc version of __builtin_clz
> 		l = llvm_ctlz(x,true);
> 		l = kputuw_num_digits[l] - (x < kputuw_thresholds[l]);
> 	}else{
170a305,314
> 		m = 1;
> 		l = 0;
> 		do {
> 			l++;
> 			m *= 10;
> 		} while (x >= m);
> 	}
> 
>     if (ks_resize(s, s.l + l + 2) < 0)
>         return EOF;
172a317,323
>     j = l;
>     cp = s.s + s.l;
>     while (x >= 10) {
>         const char *d = &kputuw_dig2r[2*(x%100)];
>         x /= 100;
>         memcpy(&cp[j-=2], d, 2);
>     }
175c326,327
< int kputuw(uint x, kstring_t* s);
---
>     if (j == 1)
>         cp[0] = cast(char)(x + '0');
177c329,332
< int kputw(int c, kstring_t* s);
---
>     s.l += l;
>     s.s[s.l] = 0;
>     return 0;
> }
179c334,342
< int kputll(long c, kstring_t* s);
---
> int kputw(int c, kstring_t* s)
> {
>     uint x = c;
>     if (c < 0) {
>         x = -x;
>         if (ks_resize(s, s.l + 3) < 0)
>             return EOF;
>         s.s[s.l++] = '-';
>     }
181c344,364
< int kputl(c_long c, kstring_t* s);
---
>     return kputuw(x, s);
> }
> 
> int kputll(long c, kstring_t* s)
> {
> 	char[32] buf;
> 	int i, l = 0;
> 	ulong x = c;
> 	if (c < 0) x = -x;
> 	do { buf[l++] = x%10 + '0'; x /= 10; } while (x > 0);
> 	if (c < 0) buf[l++] = '-';
> 	if (ks_resize(s, s.l + l + 2) < 0)
> 		return EOF;
> 	for (i = l - 1; i >= 0; --i) s.s[s.l++] = buf[i];
> 	s.s[s.l] = 0;
> 	return 0;
> }
> 
> int kputl(c_long c, kstring_t* s) {
>     return kputll(c, s);
> }
187,188c370,376
< int* ksplit(kstring_t* s, int delimiter, int* n);
< 
---
> int* ksplit(kstring_t* s, int delimiter, int* n)
> {
> 	int max = 0;
> 	int* offsets = null;
> 	*n = ksplit_core(s.s, delimiter, &max, &offsets);
> 	return offsets;
> }
