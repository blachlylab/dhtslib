4c4
<     Copyright (C) 2012-2021 Genome Research Ltd.
---
>     Copyright (C) 2012-2020 Genome Research Ltd.
27d26
< 
34a34,44
> import htslib.bgzf : BGZF;
> import htslib.cram : cram_fd;
> import htslib.hfile : hFILE;
> import htslib.thread_pool : hts_tpool;
> import htslib.sam : sam_hdr_t;
> import htslib.kstring : kstring_t;
> 
> @system:
> nothrow:
> @nogc:
> 
39,42c49,58
< enum HTS_PATH_SEPARATOR_CHAR = ':';
< enum HTS_PATH_SEPARATOR_STR = ":";
< 
< struct BGZF;
---
> version(Windows)
> {
>     enum HTS_PATH_SEPARATOR_CHAR = ';';
>     enum HTS_PATH_SEPARATOR_STR = ";";
> }
> else
> {
>     enum HTS_PATH_SEPARATOR_CHAR = ':';
>     enum HTS_PATH_SEPARATOR_STR = ":";
> }
44,47d59
< struct cram_fd;
< struct hFILE;
< struct hts_tpool;
< struct sam_hdr_t;
121a134,141
> pragma(inline,true)
> int hts_resize(T)(size_t num, ref size_t size, T* ptr, int flags)
> {
>     return (num > size)
>         ? hts_resize_array_(T.sizeof, num, size_t.sizeof, &size, cast(void **)&ptr, flags, __FUNCTION__)
>         : 0;
> }
> 
146c166,167
< enum htsFormatCategory
---
> /// Broad format category (sequence data, variant data, index, regions, etc.)
> enum htsFormatCategory // @suppress(dscanner.style.phobos_naming_convention)
153c174
<     category_maximum = 32767
---
>     category_maximum = 32_767
156c177,178
< enum htsExactFormat
---
> /// Specific format (SAM, BAM, CRAM, BCF, VCF, TBI, BED, etc.)
> enum htsExactFormat // @suppress(dscanner.style.phobos_naming_convention)
180c202
<     format_maximum = 32767
---
>     format_maximum = 32_767
183c205,206
< enum htsCompression
---
> /// Compression type
> enum htsCompression // @suppress(dscanner.style.phobos_naming_convention)
191c214
<     compression_maximum = 32767
---
>     compression_maximum = 32_767
196,208c219,226
<     htsFormatCategory category;
<     htsExactFormat format;
< 
<     struct _Anonymous_0
<     {
<         short major;
<         short minor;
<     }
< 
<     _Anonymous_0 version_;
<     htsCompression compression;
<     short compression_level; // currently unused
<     void* specific; // format specific options; see struct hts_opt.
---
>     htsFormatCategory category; /// Broad format category (sequence data, variant data, index, regions, etc.)
>     htsExactFormat format;      /// Specific format (SAM, BAM, CRAM, BCF, VCF, TBI, BED, etc.)
>     /// format version
>     struct Vers { short major, minor; } // @suppress(dscanner.style.undocumented_declaration)
>     Vers v; /// format version
>     htsCompression compression; /// Compression type
>     short compression_level;/// currently unused
>     void *specific;         /// format specific options; see struct hts_opt.
230c248
< struct htsFile
---
> struct htsFile // @suppress(dscanner.style.phobos_naming_convention)
241,251c259,267
< 
<     long lineno;
<     kstring_t line;
<     char* fn;
<     char* fn_aux;
< 
<     union _Anonymous_1
<     {
<         BGZF* bgzf;
<         cram_fd* cram;
<         hFILE* hfile;
---
>     long lineno; /// uncompressed(?) file line no.
>     kstring_t line; /// buffer to hold line
>     char *fn;       /// filename
>     char *fn_aux;   /// auxillary (i.e, index) file name
>     /// hFile plus any needed bgzf or CRAM (if applicable) structure data
>     union FP {
>         BGZF *bgzf;     /// see bgzf.d
>         cram_fd *cram;  /// see cram.d
>         hFILE *hfile;   /// see hfile.d
253,254c269
< 
<     _Anonymous_1 fp;
---
>     FP fp;              /// hFile plus any needed bgzf or CRAM (if applicable) structure data
256c271
<     htsFormat format;
---
>     htsFormat format;   /// hts file complete file format information
263,270c278,285
< // A combined thread pool and queue allocation size.
< // The pool should already be defined, but qsize may be zero to
< // indicate an appropriate queue size is taken from the pool.
< //
< // Reasons for explicitly setting it could be where many more file
< // descriptors are in use than threads, so keeping memory low is
< // important.
< struct htsThreadPool
---
> /// A combined thread pool and queue allocation size.
> /// The pool should already be defined, but qsize may be zero to
> /// indicate an appropriate queue size is taken from the pool.
> ///
> /// Reasons for explicitly setting it could be where many more file
> /// descriptors are in use than threads, so keeping memory low is
> /// important.
> struct htsThreadPool // @suppress(dscanner.style.phobos_naming_convention)
276,277c291,292
< // REQUIRED_FIELDS
< enum sam_fields
---
> /// REQUIRED_FIELDS
> enum sam_fields // @suppress(dscanner.style.phobos_naming_convention)
294c309
< // Mostly CRAM only, but this could also include other format options
---
> /// Mostly CRAM only, but this could also include other format options
364c379
<     FASTQ_OPT_BARCODE = 1003
---
>     FASTQ_OPT_BARCODE = 1003,
367,368c382,383
< // Profile options for encoding; primarily used at present in CRAM
< // but also usable in BAM as a synonym for deflate compression levels.
---
> /// Profile options for encoding; primarily used at present in CRAM
> /// but also usable in BAM as a synonym for deflate compression levels.
377c392
< // For backwards compatibility
---
> /// For backwards compatibility
380c395,396
< struct hts_opt
---
> /// Options for cache, (de)compression, threads, CRAM, etc.
> struct hts_opt // @suppress(dscanner.style.phobos_naming_convention)
382,388c398,403
<     char* arg; // string form, strdup()ed
<     hts_fmt_option opt; // tokenised key
<     // ... and value
<     union _Anonymous_2
<     {
<         int i;
<         char* s;
---
>     char *arg;          /// string form, strdup()ed
>     hts_fmt_option opt; /// tokenised key
>     /// option value
>     union VAL {         /// ... and value
>         int i;          /// int value
>         char *s;        /// string value
390,392c405,406
< 
<     _Anonymous_2 val;
<     hts_opt* next;
---
>     VAL val;            /// value
>     hts_opt *next;      /// next option (linked list)
404c418
< /*
---
> /**
412c426
< /*
---
> /**
420c434
< /*
---
> /**
425c439
< /*
---
> /**
435c449
< /*
---
> /**
453d466
< extern __gshared const(ubyte)[256] seq_nt16_table;
455c468,491
< /*! @abstract Table for converting a 4-bit encoded nucleotide to an IUPAC
---
> version(Windows){
>     __gshared const(ubyte)[256] seq_nt16_table = [
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         1, 2, 4, 8, 15,15,15,15, 15,15,15,15, 15, 0 /*=*/,15,15,
>         15, 1,14, 2, 13,15,15, 4, 11,15,15,12, 15, 3,15,15,
>         15,15, 5, 6,  8,15, 7, 9, 15,10,15,15, 15,15,15,15,
>         15, 1,14, 2, 13,15,15, 4, 11,15,15,12, 15, 3,15,15,
>         15,15, 5, 6,  8,15, 7, 9, 15,10,15,15, 15,15,15,15,
> 
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15
>     ];
> }else{
>     extern __gshared const(ubyte)[256] seq_nt16_table;
> }
> /**! @abstract Table for converting a 4-bit encoded nucleotide to an IUPAC
458d493
< extern __gshared const(char)[] seq_nt16_str;
460c495,498
< /*! @abstract Table for converting a 4-bit encoded nucleotide to about 2 bits.
---
> version(Windows) __gshared const(char)[16] seq_nt16_str = ['=','A','C','M','G','R','S','V','T','W','Y','H','K','D','B','N'];
> else extern __gshared const(char)[16] seq_nt16_str;
> 
> /**! @abstract Table for converting a 4-bit encoded nucleotide to about 2 bits.
463,465c501,503
< extern __gshared const(int)[] seq_nt16_int;
< 
< /*!
---
> version(Windows) __gshared const(int)[16] seq_nt16_int = [ 4, 0, 1, 4, 2, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4 ];
> else extern __gshared const(int)[16] seq_nt16_int;
> /**!
472c510
< /*!
---
> /**!
484c522
< /*! @abstract Introspection on the features enabled in htslib
---
> /**! @abstract Introspection on the features enabled in htslib
492c530
< /*! @abstract Introspection on the features enabled in htslib, string form
---
> /**! @abstract Introspection on the features enabled in htslib, string form
498c536
< // Whether ./configure was used or vanilla Makefile
---
> /// Whether ./configure was used or vanilla Makefile
501c539
< // Whether --enable-plugins was used
---
> /// Whether --enable-plugins was used
504c542
< // Transport specific
---
> /// Transport specific
509c547
< // Compression options
---
> /// Compression options
515c553
< // Build params
---
> /// Build params
521c559
< /*!
---
> /**!
529c567
< /*!
---
> /**!
536c574
< /*!
---
> /**!
550,551d587
<         f  FASTQ format
<         F  FASTA format
570c606
< /*!
---
> /**!
589c625
< /*!
---
> /**!
596c632
< /*!
---
> /**!
603c639
< /*!
---
> /**!
610c646
< /*!
---
> /**!
617c653
< /*!
---
> /**!
626c662
< /*!
---
> /**!
637c673
< /*!
---
> /**!
647c683
< /*!
---
> /**!
657c693
< /*!
---
> /**!
665c701
< /*!
---
> /**!
682c718
< /*!
---
> /**!
690c726
< /*!
---
> /**!
706c742
< /*!
---
> /**!
750c786
< struct hts_pair64_t
---
> struct hts_pair64_t // @suppress(dscanner.style.phobos_naming_convention)
756c792,793
< struct hts_pair64_max_t
---
> /// 64-bit start, end coordinate pair tracking max (internally used in hts.c)
> struct hts_pair64_max_t // @suppress(dscanner.style.phobos_naming_convention)
762a800
> /// Region list used in iterators (NB: apparently confined to single contig/tid)
765,770c803,808
<     const(char)* reg;
<     hts_pair_pos_t* intervals;
<     int tid;
<     uint count;
<     hts_pos_t min_beg;
<     hts_pos_t max_end;
---
>     const(char) *reg;   /// Region string
>     hts_pair_pos_t *intervals;  /// (start,end) intervals
>     int tid;            /// Contig id
>     uint count;         /// How many intervals
>     hts_pos_t min_beg;  /// absolute bounds
>     hts_pos_t max_end;  /// absolute bounds
816c854
< struct hts_itr_t
---
> struct hts_itr_t // @suppress(dscanner.style.phobos_naming_convention)
847c885
<     struct _Anonymous_3
---
>     struct Bins
854c892,898
<     _Anonymous_3 bins;
---
>     Bins bins;
> }
> /// ? index key
> struct aux_key_t { // @suppress(dscanner.style.phobos_naming_convention)
>     int key;    /// ???
>     /// ???
>     ulong min_off, max_off;
859c903
< /// Compute the first bin on a given level
---
> pragma(inline, true)
865c909
< /// Compute the parent bin of a given bin
---
> pragma(inline, true)
1033,1035c1077,1081
< enum HTS_IDX_SAVE_REMOTE = 1;
< enum HTS_IDX_SILENT_FAIL = 2;
< 
---
> enum HTS_IDX_FLAG : int 
> {
>     HTS_IDX_SAVE_REMOTE = 1,
>     HTS_IDX_SILENT_FAIL = 2
> }
1107,1111c1153
< const(char*)* hts_idx_seqnames(
<     const(hts_idx_t)* idx,
<     int* n,
<     hts_id2name_f getid,
<     void* hdr); // free only the array, not the values
---
> const(char *)* hts_idx_seqnames(const(hts_idx_t)* idx, int* n, hts_id2name_f getid, void* hdr); // free only the array, not the values
1117c1159
< int hts_idx_nseq(const(hts_idx_t)* idx);
---
> int hts_idx_nseq(const(hts_idx_t) *idx);
1122,1124c1164,1169
< enum HTS_PARSE_THOUSANDS_SEP = 1; ///< Ignore ',' separators within numbers
< enum HTS_PARSE_ONE_COORD = 2; ///< chr:pos means chr:pos-pos and not chr:pos-end
< enum HTS_PARSE_LIST = 4; ///< Expect a comma separated list of regions. (Disables HTS_PARSE_THOUSANDS_SEP)
---
> enum HTS_PARSE_FLAGS : int 
> {
>     HTS_PARSE_THOUSANDS_SEP = 1, ///< Ignore ',' separators within numbers
>     HTS_PARSE_ONE_COORD = 2, ///< chr:pos means chr:pos-pos and not chr:pos-end
>     HTS_PARSE_LIST = 4, ///< Expect a comma separated list of regions. (Disables HTS_PARSE_THOUSANDS_SEP)
> }
1138c1183
< long hts_parse_decimal(const(char)* str, char** strend, int flags);
---
> long hts_parse_decimal(const(char)* str, char** strend, HTS_PARSE_FLAGS flags);
1140c1185
< alias hts_name2id_f = int function(void*, const(char)*);
---
> alias hts_name2id_f = int function(void*, const(char)*) *;
1231c1276
<     int flags);
---
>     HTS_PARSE_FLAGS flags);
1259c1304
<     int function() readrec);
---
>     hts_readrec_func readrec);
1266c1311
< alias hts_itr_query_func = hts_itr_t* function(const(hts_idx_t)* idx, int tid, hts_pos_t beg, hts_pos_t end, int function() readrec);
---
> alias hts_itr_query_func = hts_itr_t* function(const(hts_idx_t)* idx, int tid, hts_pos_t beg, hts_pos_t end, hts_readrec_func readrec);
1286,1287c1331,1332
<     hts_itr_t* function() itr_query,
<     int function() readrec);
---
>     hts_itr_query_func itr_query,
>     hts_readrec_func readrec);
1297a1343
> 
1327,1330c1373,1376
<     int function() itr_specific,
<     int function() readrec,
<     int function() seek,
<     long function() tell);
---
>     hts_itr_multi_query_func itr_specific,
>     hts_readrec_func readrec,
>     hts_seek_func seek,
>     hts_tell_func tell);
1487c1533,1540
< int hts_reg2bin(hts_pos_t beg, hts_pos_t end, int min_shift, int n_lvls);
---
> pragma(inline,true)
> long hts_reg2bin(hts_pos_t beg, hts_pos_t end, int min_shift, int n_lvls)
> {
>     int l, s = min_shift, t = ((1<<((n_lvls<<1) + n_lvls)) - 1) / 7;
>     for (--end, l = n_lvls; l > 0; --l, s += 3, t -= 1<<((l<<1)+l))
>         if (beg>>s == end>>s) return t + (beg>>s);
>     return 0;
> }
1490c1543,1548
< int hts_bin_level(int bin);
---
> pragma(inline, true)
> int hts_bin_level(int bin) {
>     int l, b;
>     for (l = 0, b = bin; b; ++l){ b = hts_bin_parent(b);}
>     return l;
> }
1503c1561,1568
< int hts_bin_bot(int bin, int n_lvls);
---
> 
> // compute the level of bin
> pragma(inline, true)
> int hts_bin_bot(int bin, int n_lvls)
> {
>     int l = hts_bin_level(bin);
>     return (bin - hts_bin_first(l)) << (n_lvls - l) * 3;
> }
1508,1515c1573,1614
< 
< int ed_is_big();
< ushort ed_swap_2(ushort v);
< void* ed_swap_2p(void* x);
< uint ed_swap_4(uint v);
< void* ed_swap_4p(void* x);
< ulong ed_swap_8(ulong v);
< void* ed_swap_8p(void* x);
---
> pragma(inline, true)
> int ed_is_big()
> {
>     long one= 1;
>     return !(*(cast(char *)(&one)));
> }
> pragma(inline, true)
> ushort ed_swap_2(ushort v)
> {
>     return cast(ushort)(((v & 0x00FF00FFU) << 8) | ((v & 0xFF00FF00U) >> 8));
> }
> pragma(inline, true)
> void *ed_swap_2p(void *x)
> {
>     *cast(ushort*)x = ed_swap_2(*cast(ushort*)x);
>     return x;
> }
> pragma(inline, true)
> uint ed_swap_4(uint v)
> {
>     v = ((v & 0x0000FFFFU) << 16) | (v >> 16);
>     return ((v & 0x00FF00FFU) << 8) | ((v & 0xFF00FF00U) >> 8);
> }
> pragma(inline, true)
> void *ed_swap_4p(void *x)
> {
>     *cast(uint*)x = ed_swap_4(*cast(uint*)x);
>     return x;
> }
> pragma(inline, true)
> ulong ed_swap_8(ulong v)
> {
>     v = ((v & 0x00000000FFFFFFFFLU) << 32) | (v >> 32);
>     v = ((v & 0x0000FFFF0000FFFFLU) << 16) | ((v & 0xFFFF0000FFFF0000LU) >> 16);
>     return ((v & 0x00FF00FF00FF00FFLU) << 8) | ((v & 0xFF00FF00FF00FF00LU) >> 8);
> }
> pragma(inline, true)
> void *ed_swap_8p(void *x)
> {
>     *cast(ulong*)x = ed_swap_8(*cast(ulong*)x);
>     return x;
> }
