26a27
> module htslib.hts;
31a33,38
> import htslib.bgzf: BGZF;
> import htslib.cram: cram_fd;
> import htslib.hfile: hFILE;
> import htslib.thread_pool: hts_tpool;
> import htslib.sam: sam_hdr_t;
> import htslib.kstring: kstring_t;
37,40c44,53
< enum HTS_PATH_SEPARATOR_CHAR = ':';
< enum HTS_PATH_SEPARATOR_STR = ":";
< 
< struct BGZF;
---
> version(Windows)
> {
>     enum HTS_PATH_SEPARATOR_CHAR = ';';
>     enum HTS_PATH_SEPARATOR_STR = ";";
> }
> else
> {
>     enum HTS_PATH_SEPARATOR_CHAR = ':';
>     enum HTS_PATH_SEPARATOR_STR = ":";
> }
42,45d54
< struct cram_fd;
< struct hFILE;
< struct hts_tpool;
< struct sam_hdr_t;
94c103,110
< int hts_resize_array_(size_t, size_t, size_t, void*, void**, int, const(char)*);
---
> int hts_resize_array_ (
>     size_t,
>     size_t,
>     size_t,
>     void*,
>     void**,
>     int,
>     const(char)*);
119a136,143
> pragma(inline,true)
> int hts_resize(T)(size_t num, ref size_t size, T* ptr, int flags)
> {
>     return (num > size)
>         ? hts_resize_array_(T.sizeof, num, size_t.sizeof, &size, cast(void **)&ptr, flags, __FUNCTION__)
>         : 0;
> }
> 
127c151
< void hts_lib_shutdown();
---
> void hts_lib_shutdown ();
135c159
< void hts_free(void* ptr);
---
> void hts_free (void* ptr);
144c168,169
< enum htsFormatCategory
---
> /// Broad format category (sequence data, variant data, index, regions, etc.)
> enum htsFormatCategory // @suppress(dscanner.style.phobos_naming_convention)
151c176
<     category_maximum = 32767
---
>     category_maximum = 32_767
154c179,180
< enum htsExactFormat
---
> /// Specific format (SAM, BAM, CRAM, BCF, VCF, TBI, BED, etc.)
> enum htsExactFormat // @suppress(dscanner.style.phobos_naming_convention)
178c204
<     format_maximum = 32767
---
>     format_maximum = 32_767
181c207,208
< enum htsCompression
---
> /// Compression type
> enum htsCompression // @suppress(dscanner.style.phobos_naming_convention)
189c216
<     compression_maximum = 32767
---
>     compression_maximum = 32_767
191a219,220
> /// hts file complete file format information
> // NB: version is a reserved keyword in D -- changed to "vers"
194,206c223,230
<     htsFormatCategory category;
<     htsExactFormat format;
< 
<     struct _Anonymous_0
<     {
<         short major;
<         short minor;
<     }
< 
<     _Anonymous_0 version_;
<     htsCompression compression;
<     short compression_level; // currently unused
<     void* specific; // format specific options; see struct hts_opt.
---
>     htsFormatCategory category; /// Broad format category (sequence data, variant data, index, regions, etc.)
>     htsExactFormat format;      /// Specific format (SAM, BAM, CRAM, BCF, VCF, TBI, BED, etc.)
>     /// format version
>     struct Vers { short major, minor; } // @suppress(dscanner.style.undocumented_declaration)
>     Vers v; /// format version
>     htsCompression compression; /// Compression type
>     short compression_level;/// currently unused
>     void *specific;         /// format specific options; see struct hts_opt.
228c252
< struct htsFile
---
> struct htsFile // @suppress(dscanner.style.phobos_naming_convention)
239,249c263,271
< 
<     long lineno;
<     kstring_t line;
<     char* fn;
<     char* fn_aux;
< 
<     union _Anonymous_1
<     {
<         BGZF* bgzf;
<         cram_fd* cram;
<         hFILE* hfile;
---
>     long lineno; /// uncompressed(?) file line no.
>     kstring_t line; /// buffer to hold line
>     char *fn;       /// filename
>     char *fn_aux;   /// auxillary (i.e, index) file name
>     /// hFile plus any needed bgzf or CRAM (if applicable) structure data
>     union FP {
>         BGZF *bgzf;     /// see bgzf.d
>         cram_fd *cram;  /// see cram.d
>         hFILE *hfile;   /// see hfile.d
251,252c273
< 
<     _Anonymous_1 fp;
---
>     FP fp;              /// hFile plus any needed bgzf or CRAM (if applicable) structure data
254c275
<     htsFormat format;
---
>     htsFormat format;   /// hts file complete file format information
261,268c282,289
< // A combined thread pool and queue allocation size.
< // The pool should already be defined, but qsize may be zero to
< // indicate an appropriate queue size is taken from the pool.
< //
< // Reasons for explicitly setting it could be where many more file
< // descriptors are in use than threads, so keeping memory low is
< // important.
< struct htsThreadPool
---
> /// A combined thread pool and queue allocation size.
> /// The pool should already be defined, but qsize may be zero to
> /// indicate an appropriate queue size is taken from the pool.
> ///
> /// Reasons for explicitly setting it could be where many more file
> /// descriptors are in use than threads, so keeping memory low is
> /// important.
> struct htsThreadPool // @suppress(dscanner.style.phobos_naming_convention)
274,275c295,296
< // REQUIRED_FIELDS
< enum sam_fields
---
> /// REQUIRED_FIELDS
> enum sam_fields // @suppress(dscanner.style.phobos_naming_convention)
292c313
< // Mostly CRAM only, but this could also include other format options
---
> /// Mostly CRAM only, but this could also include other format options
335,336c356,357
< // Profile options for encoding; primarily used at present in CRAM
< // but also usable in BAM as a synonym for deflate compression levels.
---
> /// Profile options for encoding; primarily used at present in CRAM
> /// but also usable in BAM as a synonym for deflate compression levels.
345c366
< // For backwards compatibility
---
> /// For backwards compatibility
348c369,370
< struct hts_opt
---
> /// Options for cache, (de)compression, threads, CRAM, etc.
> struct hts_opt // @suppress(dscanner.style.phobos_naming_convention)
350,356c372,377
<     char* arg; // string form, strdup()ed
<     hts_fmt_option opt; // tokenised key
<     // ... and value
<     union _Anonymous_2
<     {
<         int i;
<         char* s;
---
>     char *arg;          /// string form, strdup()ed
>     hts_fmt_option opt; /// tokenised key
>     /// option value
>     union VAL {         /// ... and value
>         int i;          /// int value
>         char *s;        /// string value
358,360c379,380
< 
<     _Anonymous_2 val;
<     hts_opt* next;
---
>     VAL val;            /// value
>     hts_opt *next;      /// next option (linked list)
372c392
< /*
---
> /**
378c398
< int hts_opt_add(hts_opt** opts, const(char)* c_arg);
---
> int hts_opt_add (hts_opt** opts, const(char)* c_arg);
380c400
< /*
---
> /**
386c406
< int hts_opt_apply(htsFile* fp, hts_opt* opts);
---
> int hts_opt_apply (htsFile* fp, hts_opt* opts);
388c408
< /*
---
> /**
391c411
< void hts_opt_free(hts_opt* opts);
---
> void hts_opt_free (hts_opt* opts);
393c413
< /*
---
> /**
401c421
< int hts_parse_format(htsFormat* opt, const(char)* str);
---
> int hts_parse_format (htsFormat* opt, const(char)* str);
403c423
< /*
---
> /**
414c434
< int hts_parse_opt_list(htsFormat* opt, const(char)* str);
---
> int hts_parse_opt_list (htsFormat* opt, const(char)* str);
421d440
< extern __gshared const(ubyte)[256] seq_nt16_table;
423c442,465
< /*! @abstract Table for converting a 4-bit encoded nucleotide to an IUPAC
---
> version(Windows){
>     __gshared const(ubyte)[256] seq_nt16_table = [
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         1, 2, 4, 8, 15,15,15,15, 15,15,15,15, 15, 0 /*=*/,15,15,
>         15, 1,14, 2, 13,15,15, 4, 11,15,15,12, 15, 3,15,15,
>         15,15, 5, 6,  8,15, 7, 9, 15,10,15,15, 15,15,15,15,
>         15, 1,14, 2, 13,15,15, 4, 11,15,15,12, 15, 3,15,15,
>         15,15, 5, 6,  8,15, 7, 9, 15,10,15,15, 15,15,15,15,
> 
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15,
>         15,15,15,15, 15,15,15,15, 15,15,15,15, 15,15,15,15
>     ];
> }else{
>     extern __gshared const(ubyte)[256] seq_nt16_table;
> }
> /**! @abstract Table for converting a 4-bit encoded nucleotide to an IUPAC
426d467
< extern __gshared const(char)[] seq_nt16_str;
428c469,472
< /*! @abstract Table for converting a 4-bit encoded nucleotide to about 2 bits.
---
> version(Windows) __gshared const(char)[16] seq_nt16_str = ['=','A','C','M','G','R','S','V','T','W','Y','H','K','D','B','N'];
> else extern __gshared const(char)[16] seq_nt16_str;
> 
> /**! @abstract Table for converting a 4-bit encoded nucleotide to about 2 bits.
431,433c475,477
< extern __gshared const(int)[] seq_nt16_int;
< 
< /*!
---
> version(Windows) __gshared const(int)[16] seq_nt16_int = [ 4, 0, 1, 4, 2, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4 ];
> else extern __gshared const(int)[16] seq_nt16_int;
> /**!
438c482
< const(char)* hts_version();
---
> const(char)* hts_version ();
440c484
< /*!
---
> /**!
450c494
< enum HTS_VERSION = 101200;
---
> enum HTS_VERSION = 101200; // @suppress(dscanner.style.number_literals)
452c496
< /*! @abstract Introspection on the features enabled in htslib
---
> /**! @abstract Introspection on the features enabled in htslib
456c500
< uint hts_features();
---
> uint hts_features ();
458c502
< const(char)* hts_test_feature(uint id);
---
> const(char)* hts_test_feature (uint id);
460c504
< /*! @abstract Introspection on the features enabled in htslib, string form
---
> /**! @abstract Introspection on the features enabled in htslib, string form
464c508
< const(char)* hts_feature_string();
---
> const(char)* hts_feature_string ();
466c510
< // Whether ./configure was used or vanilla Makefile
---
> /// Whether ./configure was used or vanilla Makefile
469c513
< // Whether --enable-plugins was used
---
> /// Whether --enable-plugins was used
472c516
< // Transport specific
---
> /// Transport specific
477c521
< // Compression options
---
> /// Compression options
483c527
< // Build params
---
> /// Build params
489c533
< /*!
---
> /**!
495c539
< int hts_detect_format(hFILE* fp, htsFormat* fmt);
---
> int hts_detect_format (hFILE* fp, htsFormat* fmt);
497c541
< /*!
---
> /**!
502c546
< char* hts_format_description(const(htsFormat)* format);
---
> char* hts_format_description (const(htsFormat)* format);
504c548
< /*!
---
> /**!
534c578
< htsFile* hts_open(const(char)* fn, const(char)* mode);
---
> htsFile* hts_open (const(char)* fn, const(char)* mode);
536c580
< /*!
---
> /**!
550c594
< htsFile* hts_open_format(
---
> htsFile* hts_open_format (
555c599
< /*!
---
> /**!
560c604
< htsFile* hts_hopen(hFILE* fp, const(char)* fn, const(char)* mode);
---
> htsFile* hts_hopen (hFILE* fp, const(char)* fn, const(char)* mode);
562c606
< /*!
---
> /**!
567c611
< int hts_close(htsFile* fp);
---
> int hts_close (htsFile* fp);
569c613
< /*!
---
> /**!
574c618
< const(htsFormat)* hts_get_format(htsFile* fp);
---
> const(htsFormat)* hts_get_format (htsFile* fp);
576c620
< /*!
---
> /**!
581c625
< const(char)* hts_format_file_extension(const(htsFormat)* format);
---
> const(char)* hts_format_file_extension (const(htsFormat)* format);
583c627
< /*!
---
> /**!
590c634
< int hts_set_opt(htsFile* fp, hts_fmt_option opt, ...);
---
> int hts_set_opt (htsFile* fp, hts_fmt_option opt, ...);
592c636
< /*!
---
> /**!
600c644
< int hts_getline(htsFile* fp, int delimiter, kstring_t* str);
---
> int hts_getline (htsFile* fp, int delimiter, kstring_t* str);
602,603c646,647
< char** hts_readlines(const(char)* fn, int* _n);
< /*!
---
> char** hts_readlines (const(char)* fn, int* _n);
> /**!
611c655
< char** hts_readlist(const(char)* fn, int is_file, int* _n);
---
> char** hts_readlist (const(char)* fn, int is_file, int* _n);
613c657
< /*!
---
> /**!
621c665
< int hts_set_threads(htsFile* fp, int n);
---
> int hts_set_threads (htsFile* fp, int n);
623c667
< /*!
---
> /**!
629c673
< int hts_set_thread_pool(htsFile* fp, htsThreadPool* p);
---
> int hts_set_thread_pool (htsFile* fp, htsThreadPool* p);
631c675
< /*!
---
> /**!
637c681
< void hts_set_cache_size(htsFile* fp, int n);
---
> void hts_set_cache_size (htsFile* fp, int n);
639c683
< /*!
---
> /**!
646c690
< int hts_set_fai_filename(htsFile* fp, const(char)* fn_aux);
---
> int hts_set_fai_filename (htsFile* fp, const(char)* fn_aux);
648c692
< /*!
---
> /**!
654c698
< int hts_set_filter_expression(htsFile* fp, const(char)* expr);
---
> int hts_set_filter_expression (htsFile* fp, const(char)* expr);
666c710
< int hts_check_EOF(htsFile* fp);
---
> int hts_check_EOF (htsFile* fp);
682,690c726,734
< enum HTS_IDX_NOCOOR = -2;
< enum HTS_IDX_START = -3;
< enum HTS_IDX_REST = -4;
< enum HTS_IDX_NONE = -5;
< 
< enum HTS_FMT_CSI = 0;
< enum HTS_FMT_BAI = 1;
< enum HTS_FMT_TBI = 2;
< enum HTS_FMT_CRAI = 3;
---
> enum HTS_IDX_NOCOOR = -2; /// iterates over unmapped reads sorted at the end of the file
> enum HTS_IDX_START = -3; /// iterates over the entire file
> enum HTS_IDX_REST = -4; /// iterates from the current position to the end of the file
> enum HTS_IDX_NONE = -5; /// always returns "no more alignment records"
> 
> enum HTS_FMT_CSI = 0; /// coordinate-sorted index (new)
> enum HTS_FMT_BAI = 1; /// BAM index (old)
> enum HTS_FMT_TBI = 2; /// Tabix index
> enum HTS_FMT_CRAI = 3; /// CRAM index (not sure if superceded by CSI?)
716c760
< struct hts_pair64_t
---
> struct hts_pair64_t // @suppress(dscanner.style.phobos_naming_convention)
722c766,767
< struct hts_pair64_max_t
---
> /// 64-bit start, end coordinate pair tracking max (internally used in hts.c)
> struct hts_pair64_max_t // @suppress(dscanner.style.phobos_naming_convention)
728a774
> /// Region list used in iterators (NB: apparently confined to single contig/tid)
731,736c777,782
<     const(char)* reg;
<     hts_pair_pos_t* intervals;
<     int tid;
<     uint count;
<     hts_pos_t min_beg;
<     hts_pos_t max_end;
---
>     const(char) *reg;   /// Region string
>     hts_pair_pos_t *intervals;  /// (start,end) intervals
>     int tid;            /// Contig id
>     uint count;         /// How many intervals
>     hts_pos_t min_beg;  /// absolute bounds
>     hts_pos_t max_end;  /// absolute bounds
739,741c785,787
< alias hts_readrec_func = int function(BGZF* fp, void* data, void* r, int* tid, hts_pos_t* beg, hts_pos_t* end);
< alias hts_seek_func = int function(void* fp, long offset, int where);
< alias hts_tell_func = c_long function(void* fp);
---
> alias hts_readrec_func = int function (BGZF* fp, void* data, void* r, int* tid, hts_pos_t* beg, hts_pos_t* end);
> alias hts_seek_func = int function (void* fp, long offset, int where);
> alias hts_tell_func = c_long function (void* fp);
782c828
< struct hts_itr_t
---
> struct hts_itr_t // @suppress(dscanner.style.phobos_naming_convention)
809,811c855,857
<     int function() readrec;
<     int function() seek;
<     long function() tell;
---
>     int function () readrec;
>     int function () seek;
>     long function () tell;
813c859
<     struct _Anonymous_3
---
>     struct Bins
820c866,872
<     _Anonymous_3 bins;
---
>     Bins bins;
> }
> /// ? index key
> struct aux_key_t { // @suppress(dscanner.style.phobos_naming_convention)
>     int key;    /// ???
>     /// ???
>     ulong min_off, max_off;
824a877
> pragma(inline, true)
829a883
> pragma(inline, true)
849c903
< hts_idx_t* hts_idx_init(
---
> hts_idx_t* hts_idx_init (
859c913
< void hts_idx_destroy(hts_idx_t* idx);
---
> void hts_idx_destroy (hts_idx_t* idx);
873c927
< int hts_idx_push(
---
> int hts_idx_push (
886c940
< int hts_idx_finish(hts_idx_t* idx, ulong final_offset);
---
> int hts_idx_finish (hts_idx_t* idx, ulong final_offset);
892c946
< int hts_idx_fmt(hts_idx_t* idx);
---
> int hts_idx_fmt (hts_idx_t* idx);
900c954
< int hts_idx_tbi_name(hts_idx_t* idx, int tid, const(char)* name);
---
> int hts_idx_tbi_name (hts_idx_t* idx, int tid, const(char)* name);
910c964
< int hts_idx_save(const(hts_idx_t)* idx, const(char)* fn, int fmt);
---
> int hts_idx_save (const(hts_idx_t)* idx, const(char)* fn, int fmt);
919c973
< int hts_idx_save_as(
---
> int hts_idx_save_as (
956c1010
< hts_idx_t* hts_idx_load(const(char)* fn, int fmt);
---
> hts_idx_t* hts_idx_load (const(char)* fn, int fmt);
967c1021
< hts_idx_t* hts_idx_load2(const(char)* fn, const(char)* fnidx);
---
> hts_idx_t* hts_idx_load2 (const(char)* fn, const(char)* fnidx);
990c1044
< hts_idx_t* hts_idx_load3(
---
> hts_idx_t* hts_idx_load3 (
997,999c1051,1055
< enum HTS_IDX_SAVE_REMOTE = 1;
< enum HTS_IDX_SILENT_FAIL = 2;
< 
---
> enum HTS_IDX_FLAG : int 
> {
>     HTS_IDX_SAVE_REMOTE = 1,
>     HTS_IDX_SILENT_FAIL = 2
> }
1014c1070
< ubyte* hts_idx_get_meta(hts_idx_t* idx, uint* l_meta);
---
> ubyte* hts_idx_get_meta (hts_idx_t* idx, uint* l_meta);
1028c1084
< int hts_idx_set_meta(hts_idx_t* idx, uint l_meta, ubyte* meta, int is_copy);
---
> int hts_idx_set_meta (hts_idx_t* idx, uint l_meta, ubyte* meta, int is_copy);
1044c1100
< int hts_idx_get_stat(
---
> int hts_idx_get_stat (
1057c1113
< ulong hts_idx_get_n_no_coor(const(hts_idx_t)* idx);
---
> ulong hts_idx_get_n_no_coor (const(hts_idx_t)* idx);
1062,1064c1118,1123
< enum HTS_PARSE_THOUSANDS_SEP = 1; ///< Ignore ',' separators within numbers
< enum HTS_PARSE_ONE_COORD = 2; ///< chr:pos means chr:pos-pos and not chr:pos-end
< enum HTS_PARSE_LIST = 4; ///< Expect a comma separated list of regions. (Disables HTS_PARSE_THOUSANDS_SEP)
---
> enum HTS_PARSE_FLAGS : int 
> {
>     HTS_PARSE_THOUSANDS_SEP = 1, ///< Ignore ',' separators within numbers
>     HTS_PARSE_ONE_COORD = 2, ///< chr:pos means chr:pos-pos and not chr:pos-end
>     HTS_PARSE_LIST = 4, ///< Expect a comma separated list of regions. (Disables HTS_PARSE_THOUSANDS_SEP)
> }
1078c1137
< long hts_parse_decimal(const(char)* str, char** strend, int flags);
---
> long hts_parse_decimal (const(char)* str, char** strend, HTS_PARSE_FLAGS flags);
1080,1081c1139,1140
< alias hts_name2id_f = int function(void*, const(char)*);
< alias hts_id2name_f = const(char)* function(void*, int);
---
> alias hts_name2id_f = int function (void*, const(char)*);
> alias hts_id2name_f = const(char)* function (void*, int);
1093c1152
< const(char)* hts_parse_reg64(const(char)* str, hts_pos_t* beg, hts_pos_t* end);
---
> const(char)* hts_parse_reg64 (const(char)* str, hts_pos_t* beg, hts_pos_t* end);
1102c1161
< const(char)* hts_parse_reg(const(char)* str, int* beg, int* end);
---
> const(char)* hts_parse_reg (const(char)* str, int* beg, int* end);
1165c1224
< const(char)* hts_parse_region(
---
> const(char)* hts_parse_region (
1172c1231
<     int flags);
---
>     HTS_PARSE_FLAGS flags);
1195c1254
< hts_itr_t* hts_itr_query(
---
> hts_itr_t* hts_itr_query (
1200c1259
<     int function() readrec);
---
>     hts_readrec_func readrec);
1205c1264
< void hts_itr_destroy(hts_itr_t* iter);
---
> void hts_itr_destroy (hts_itr_t* iter);
1207c1266
< alias hts_itr_query_func = hts_itr_t* function(const(hts_idx_t)* idx, int tid, hts_pos_t beg, hts_pos_t end, int function() readrec);
---
> alias hts_itr_query_func = hts_itr_t* function (const(hts_idx_t)* idx, int tid, hts_pos_t beg, hts_pos_t end, hts_readrec_func readrec);
1222c1281
< hts_itr_t* hts_itr_querys(
---
> hts_itr_t* hts_itr_querys (
1227,1228c1286,1287
<     hts_itr_t* function() itr_query,
<     int function() readrec);
---
>     hts_itr_query_func itr_query,
>     hts_readrec_func readrec);
1237c1296
< int hts_itr_next(BGZF* fp, hts_itr_t* iter, void* r, void* data);
---
> int hts_itr_next (BGZF* fp, hts_itr_t* iter, void* r, void* data);
1249c1308
< const(char*)* hts_idx_seqnames(
---
> const(char*)* hts_idx_seqnames (
1259,1261c1318,1320
< alias hts_itr_multi_query_func = int function(const(hts_idx_t)* idx, hts_itr_t* itr);
< int hts_itr_multi_bam(const(hts_idx_t)* idx, hts_itr_t* iter);
< int hts_itr_multi_cram(const(hts_idx_t)* idx, hts_itr_t* iter);
---
> alias hts_itr_multi_query_func = int function (const(hts_idx_t)* idx, hts_itr_t* itr);
> int hts_itr_multi_bam (const(hts_idx_t)* idx, hts_itr_t* iter);
> int hts_itr_multi_cram (const(hts_idx_t)* idx, hts_itr_t* iter);
1278c1337
< hts_itr_t* hts_itr_regions(
---
> hts_itr_t* hts_itr_regions (
1284,1287c1343,1346
<     int function() itr_specific,
<     int function() readrec,
<     int function() seek,
<     long function() tell);
---
>     hts_itr_multi_query_func itr_specific,
>     hts_readrec_func readrec,
>     hts_seek_func seek,
>     hts_tell_func tell);
1295c1354
< int hts_itr_multi_next(htsFile* fd, hts_itr_t* iter, void* r);
---
> int hts_itr_multi_next (htsFile* fd, hts_itr_t* iter, void* r);
1308c1367
< hts_reglist_t* hts_reglist_create(
---
> hts_reglist_t* hts_reglist_create (
1319c1378
< void hts_reglist_free(hts_reglist_t* reglist, int count);
---
> void hts_reglist_free (hts_reglist_t* reglist, int count);
1338c1397
< int hts_file_type(const(char)* fname);
---
> int hts_file_type (const(char)* fname);
1346,1347c1405,1406
< errmod_t* errmod_init(double depcorr);
< void errmod_destroy(errmod_t* em);
---
> errmod_t* errmod_init (double depcorr);
> void errmod_destroy (errmod_t* em);
1355c1414
< int errmod_cal(const(errmod_t)* em, int n, int m, ushort* bases, float* q);
---
> int errmod_cal (const(errmod_t)* em, int n, int m, ushort* bases, float* q);
1393c1452
< int probaln_glocal(
---
> int probaln_glocal (
1423c1482
< hts_md5_context* hts_md5_init();
---
> hts_md5_context* hts_md5_init ();
1426c1485
< void hts_md5_update(hts_md5_context* ctx, const(void)* data, c_ulong size);
---
> void hts_md5_update (hts_md5_context* ctx, const(void)* data, c_ulong size);
1429c1488
< void hts_md5_final(ubyte* digest, hts_md5_context* ctx);
---
> void hts_md5_final (ubyte* digest, hts_md5_context* ctx);
1434c1493
< void hts_md5_reset(hts_md5_context* ctx);
---
> void hts_md5_reset (hts_md5_context* ctx);
1439c1498
< void hts_md5_hex(char* hex, const(ubyte)* digest);
---
> void hts_md5_hex (char* hex, const(ubyte)* digest);
1442c1501
< void hts_md5_destroy(hts_md5_context* ctx);
---
> void hts_md5_destroy (hts_md5_context* ctx);
1444c1503,1510
< int hts_reg2bin(hts_pos_t beg, hts_pos_t end, int min_shift, int n_lvls);
---
> pragma(inline,true)
> long hts_reg2bin(hts_pos_t beg, hts_pos_t end, int min_shift, int n_lvls)
> {
>     int l, s = min_shift, t = ((1<<((n_lvls<<1) + n_lvls)) - 1) / 7;
>     for (--end, l = n_lvls; l > 0; --l, s += 3, t -= 1<<((l<<1)+l))
>         if (beg>>s == end>>s) return t + (beg>>s);
>     return 0;
> }
1447c1513,1519
< int hts_bin_bot(int bin, int n_lvls);
---
> pragma(inline, true)
> int hts_bin_bot(int bin, int n_lvls)
> {
>     int l, b;
>     for (l = 0, b = bin; b; ++l){ b = hts_bin_parent(b); } // compute the level of bin
>     return (bin - hts_bin_first(l)) << (n_lvls - l) * 3;
> }
1452,1459c1524,1565
< 
< int ed_is_big();
< ushort ed_swap_2(ushort v);
< void* ed_swap_2p(void* x);
< uint ed_swap_4(uint v);
< void* ed_swap_4p(void* x);
< ulong ed_swap_8(ulong v);
< void* ed_swap_8p(void* x);
---
> pragma(inline, true)
> int ed_is_big()
> {
>     long one= 1;
>     return !(*(cast(char *)(&one)));
> }
> pragma(inline, true)
> ushort ed_swap_2(ushort v)
> {
>     return cast(ushort)(((v & 0x00FF00FFU) << 8) | ((v & 0xFF00FF00U) >> 8));
> }
> pragma(inline, true)
> void *ed_swap_2p(void *x)
> {
>     *cast(ushort*)x = ed_swap_2(*cast(ushort*)x);
>     return x;
> }
> pragma(inline, true)
> uint ed_swap_4(uint v)
> {
>     v = ((v & 0x0000FFFFU) << 16) | (v >> 16);
>     return ((v & 0x00FF00FFU) << 8) | ((v & 0xFF00FF00U) >> 8);
> }
> pragma(inline, true)
> void *ed_swap_4p(void *x)
> {
>     *cast(uint*)x = ed_swap_4(*cast(uint*)x);
>     return x;
> }
> pragma(inline, true)
> ulong ed_swap_8(ulong v)
> {
>     v = ((v & 0x00000000FFFFFFFFLU) << 32) | (v >> 32);
>     v = ((v & 0x0000FFFF0000FFFFLU) << 16) | ((v & 0xFFFF0000FFFF0000LU) >> 16);
>     return ((v & 0x00FF00FF00FF00FFLU) << 8) | ((v & 0xFF00FF00FF00FF00LU) >> 8);
> }
> pragma(inline, true)
> void *ed_swap_8p(void *x)
> {
>     *cast(ulong*)x = ed_swap_8(*cast(ulong*)x);
>     return x;
> }
