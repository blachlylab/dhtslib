30a31
> import std.format: format;
31a33,38
> import htslib.hts;
> import htslib.hts_log;
> import htslib.bgzf : BGZF;
> import htslib.kstring : kstring_t, ssize_t;
> 
> @system:
32a40
> @nogc nothrow {
311c319
< extern (D) auto bam_get_cigar(T)(auto ref T b)
---
> extern (D) auto bam_get_cigar(bam1_t * b)
313c321
<     return cast(uint*) b.data + b.core.l_qname;
---
>     return cast(uint*) ((*b).data + (*b).core.l_qname);
378a387,391
> extern (D) void bam_set_seqi(T0, T1, T3)(auto ref T0 s, auto ref T1 i, auto ref T3 b)
> {
>     s[i >> 1] = (s[i >> 1] & (0xf0 >> ((~i & 1) << 2))) | cast(ubyte)(b << ((~i & 1) << 2));
> }
> 
440,442c453,454
< sam_hdr_t* bam_hdr_init();
< void bam_hdr_destroy(sam_hdr_t* h);
< sam_hdr_t* bam_hdr_dup(const(sam_hdr_t)* h0);
---
> pragma(inline,true) 
> sam_hdr_t* bam_hdr_init() { return sam_hdr_init(); }
444c456,462
< alias samFile = htsFile_;
---
> pragma(inline,true) 
> void bam_hdr_destroy(sam_hdr_t* h) { sam_hdr_destroy(h); }
> 
> pragma(inline,true) 
> sam_hdr_t* bam_hdr_dup(const(sam_hdr_t)* h0) { return sam_hdr_dup(h0); }
> 
> alias samFile = htsFile;
835c853,854
< int bam_name2id(sam_hdr_t* h, const(char)* ref_);
---
> pragma(inline,true)
> int bam_name2id(sam_hdr_t* h, const(char)* ref_) { return sam_hdr_name2tid(h, ref_); }
899a919,925
> extern (D) auto sam_hdr_update_hd(T, A...)(auto ref T h, auto ref A a)
> {
>     
>     static assert (a.length %2 == 0);   
>     return sam_hdr_update_line(h, "HD", null, null, a, null);
> }
> 
1014c1040,1043
< void bam_set_mempolicy(bam1_t* b, uint policy);
---
> pragma(inline,true)
> void bam_set_mempolicy(bam1_t* b, uint policy) {
>     b.mempolicy = policy;
> }
1021c1050,1053
< uint bam_get_mempolicy(bam1_t* b);
---
> pragma(inline,true)
> uint bam_get_mempolicy(bam1_t* b) {
>     return b.mempolicy;
> }
1203c1235,1240
< alias bam_itr_next = sam_itr_next;
---
> 
> pragma(inline, true)
> extern (D) auto bam_itr_next(T0, T1, T2)(auto ref T0 htsfp, auto ref T1 itr, auto ref T2 r)
> {
>     return hts_itr_next(htsfp.fp.bgzf, itr, r, 0);
> }
1414a1452,1453
> } 
> 
1421c1460,1477
< int sam_itr_next(htsFile* htsfp, hts_itr_t* itr, bam1_t* r);
---
> pragma(inline,true)
> int sam_itr_next(htsFile* htsfp, hts_itr_t* itr, bam1_t* r) {
>     if (!htsfp.is_bgzf && !htsfp.is_cram) {
>         hts_log_error(__FUNCTION__, format("%s not BGZF compressed", htsfp.fn ? htsfp.fn : "File"));
>         return -2;
>     }
>     if (!itr) {
>         hts_log_error(__FUNCTION__,"Null iterator");
>         return -2;
>     }
> 
>     if (itr.multi)
>         return hts_itr_multi_next(htsfp, itr, r);
>     else
>         return hts_itr_next(htsfp.is_bgzf ? htsfp.fp.bgzf : null, itr, r, htsfp);
> }
> 
> @nogc nothrow:
2003,2004c2059
< enum htsRealnFlags
< {
---
> enum htsRealnFlags {
2037a2093
> 
2064a2121
> 
2069a2127
> 
2201d2258
< 
